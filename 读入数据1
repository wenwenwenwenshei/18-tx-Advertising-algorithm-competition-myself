# -*- coding:utf-8 -*-
import pandas as pd
import lightgbm as lgb
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.preprocessing import OneHotEncoder,LabelEncoder
from scipy import sparse
import os
import math
#from gensim.models.word2vec import Word2Vec
from sklearn.feature_extraction.text import CountVectorizer

feature_data_path  = '../feature/'
if os.path.exists('../data/data.csv'):
    data =pd.read_csv('../data/data.csv')
    print('original data is ready,行数为：',len(data))
else:
    ad_feature=pd.read_csv('../data/adFeature.csv')
    if os.path.exists('../data/userFeature.csv'):
        user_feature=pd.read_csv('../data/userFeature.csv')
    else:
        userFeature_data = []
        with open('../data/userFeature.data', 'r') as f:
            for i, line in enumerate(f):
                line = line.strip().split('|')
                userFeature_dict = {}
                for each in line:
                    each_list = each.split(' ')
                    userFeature_dict[each_list[0]] = ' '.join(each_list[1:])
                userFeature_data.append(userFeature_dict)
                if i % 100000 == 0:
                    print(i)
            user_feature = pd.DataFrame(userFeature_data)
            user_feature.to_csv('../data/userFeature.csv', index=False)
    train=pd.read_csv('../data/train.csv')
    predict=pd.read_csv('../data/test2.csv')
    train.loc[train['label']==-1,'label']=0
    predict['label']=-1
    data=pd.concat([train,predict])
    data=pd.merge(data,ad_feature,on='aid',how='left')
    data=pd.merge(data,user_feature,on='uid',how='left')
    data.to_csv('../data/data.csv')

databin=data.sample(frac=0.01)
databin.to_csv('../data/databin.csv')
#get mini data
'''
if os.path.exists('../data/databin.csv'):
    databin = pd.read_csv('../data/databin.csv')
    print 'databin  is ready,行数为：\n', len(databin)
else:
    n=int(math.ceil(len(data) / 100)) #待选取的行数
    databin =data[0:10000]
    databin.to_csv('../data/databin.csv')
'''
'''
#data to vectordata
data = data.fillna('-1')
data=data.drop(['interest3','interest4'],axis=1)
vector_feature = ['appIdAction', 'appIdInstall', 'interest1', 'interest2', 
                  'interest5', 'kw1', 'kw2', 'kw3', 'topic1', 'topic2', 'topic3']
cv=CountVectorizer(token_pattern='(?u)\\b\\w+\\b')
for feature in vector_feature:
    cv.fit(data[feature])
    datavec = cv.transform(data[feature])
print('cv prepared !')
datavec.to_csv('../data/datavec.csv')
'''

'''

def gen_new_feature(data):

    adfea = ['advertiserId']
    userfea = ['age']
    # userfea = ['age','education','consumptionAbility','education','gender','house','marriageStatus']
    #num = len(adfea) * len(userfea)
    newfeature = []
    for i in range(len(adfea)):
        for j in range(len(userfea)):
            newname = adfea[i]+'1'+userfea[j]
            lie1=adfea[i]
            lie2=userfea[j]
            ans1=map(str, data[lie1]) #把一列int数据转为str
            ans2 = map(str, data[lie2])
            newfeature[i] = [e1 + e2 for (e1, e2) in zip(ans1, ans2)]
            #data.c=newfeature
    return newfeature

if __name__=='__main__':
    addfea_databin=gen_new_feature(databin)
'''
'''
def gen_features():

    print('uid_count')
    groupby_uid =  data.groupby('uid').size()
    data['uid_count'] = data['uid'].apply(lambda x: groupby_uid[x])
    data[['uid','uid_count']].to_csv(feature_data_path+'uid_count.csv',index = False)

    del groupby_uid
    gc.collect()

    print('uid_appInstallcount,uid_appActioncount')
    data['uid_appInstallcount'] = data['appIdInstall'].apply(lambda x:len([e for e in str(x).split(' ')]
                                                             if x is not None else None
                                                                 ))
    data['uid_appActioncount'] = data['appIdAction'].apply(lambda x:len([e for e in str(x).split(' ')]
                                                             if x is not None else -1
                                                                 ))
    data[['uid','uid_appInstallcount','uid_appActioncount']].to_csv(feature_data_path+'uid_appInstallAction.csv',index = False)



    print("aid_usercount")
    temp = data.groupby('aid')['uid'].count().reset_index()
    temp.columns = ['aid', 'aid_count']
    temp.to_csv(feature_data_path + 'aid_count.csv', index=False)

    print("aid_gender")
    temp = data.groupby('gender')['aid'].count().reset_index()
    temp.columns=['aid','aid_genderCount']
    temp.to_csv(feature_data_path+'aid_gendercount.csv',index=False)

    print("aid_age")
    temp = data.groupby('age')['aid'].count().reset_index()
    temp.columns=['aid','aid_ageCount']
    temp.to_csv(feature_data_path+'aid_ageCount.csv',index=False)

    print("aid_marriageStatus")
    temp = data.groupby('marriageStatus')['aid'].count().reset_index()
    temp.columns=['aid','aid_marriageStatusCount']
    temp.to_csv(feature_data_path+'aid_marriageStatusCount.csv',index=False)


    print("aid_education")
    temp = data.groupby('education')['aid'].count().reset_index()
    temp.columns=['aid','aid_educationCount']
    temp.to_csv(feature_data_path+'aid_educationCount.csv',index=False)

    print("aid_LBS")
    temp = data.groupby('LBS')['aid'].count().reset_index()
    temp.columns=['aid','aid_LBSCount']
    temp.to_csv(feature_data_path+'aid_LBSCount.csv',index=False)



    print("adCategoryId_usercount")
    temp = data.groupby('adCategoryId')['uid'].count().reset_index()
    temp.columns = ['adCategoryId', 'adCategoryId_count']
    temp.to_csv(feature_data_path + 'adCategoryId_count.csv', index=False)

    print("adCategoryId_gender")
    temp = data.groupby('gender')['adCategoryId'].count().reset_index()
    temp.columns = ['adCategoryId', 'adCategoryId_genderCount']
    temp.to_csv(feature_data_path + 'adCategoryId_gendercount.csv', index=False)

    print("adCategoryId_age")
    temp = data.groupby('age')['adCategoryId'].count().reset_index()
    temp.columns = ['aid', 'adCategoryId_ageCount']
    temp.to_csv(feature_data_path + 'adCategoryId_ageCount.csv', index=False)

    print("adCategoryId_marriageStatus")
    temp = data.groupby('marriageStatus')['adCategoryId'].count().reset_index()
    temp.columns = ['adCategoryId', 'adCategoryId_marriageStatusCount']
    temp.to_csv(feature_data_path + 'adCategoryId_marriageStatusCount.csv', index=False)

    print("adCategoryId_education")
    temp = data.groupby('education')['adCategoryId'].count().reset_index()
    temp.columns = ['adCategoryId', 'adCategoryId_educationCount']
    temp.to_csv(feature_data_path + 'adCategoryId_educationCount.csv', index=False)

    print("adCategoryId_LBS")
    temp = data.groupby('LBS')['adCategoryId'].count().reset_index()
    temp.columns = ['adCategoryId', 'adCategoryId_LBSCount']
    temp.to_csv(feature_data_path + 'adCategoryId_LBSCount.csv', index=False)
'''
